{"version":3,"sources":["Toggle.js","App.js","serviceWorker.js","index.js"],"names":["Toggle","id","onClick","this","props","toggle","className","state","Component","App","move","e","clientX","pageWidth","newGrid","document","querySelector","style","gridTemplateColumns","resize","page","width","getComputedStyle","match","setState","Number","addEventListener","remove","removeEventListener","input","isLight","switchMode","bind","getElementById","innerHTML","marked","breaks","onMouseUp","value","onChange","target","onMouseDown","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAYeA,G,6KAPX,OACE,yBAAKC,GAAG,SAASC,QAASC,KAAKC,MAAMC,QACnC,yBAAKJ,GAAG,QAAQK,UAAWH,KAAKC,MAAMG,MAAM,QAAQ,U,GAJvCC,cCmENC,G,wDAhEb,WAAYL,GAAO,IAAD,8BAChB,cAAMA,IAqBRM,KAAO,SAACC,GAEN,GAAGA,EAAEC,QAAQ,IAAMD,EAAEC,QAAQ,EAAKL,MAAMM,UAAU,GAAG,CACnD,IAAIC,EAAUH,EAAEC,QAAQ,qBACxBG,SAASC,cAAc,SAASC,MAAMC,oBAAsBJ,IA1B9C,EA8BlBK,OAAS,SAACR,GACR,IAAIS,EAAOL,SAASC,cAAc,SAC9BK,EAAQC,iBAAiBF,GAAMC,MAAME,MAAM,OAC/C,EAAKC,SAAS,CAACX,UAAUY,OAAOJ,KAChCD,EAAKM,iBAAiB,YAAa,EAAKhB,OAlCxB,EAqClBiB,OAAS,WACIZ,SAASC,cAAc,SAC7BY,oBAAoB,YAAa,EAAKlB,OArC3C,EAAKH,MAAM,CACTsB,MAAM,8pBACNC,SAAQ,EACRjB,UAAU,GAEZ,EAAKkB,WAAa,EAAKA,WAAWC,KAAhB,gBAPF,E,gEAWhBjB,SAASkB,eAAe,WAAWC,UAAYC,IAAOhC,KAAKI,MAAMsB,MAAO,CAACO,QAAO,M,2CAIhFrB,SAASkB,eAAe,WAAWC,UAAYC,IAAOhC,KAAKI,MAAMsB,MAAO,CAACO,QAAO,M,mCAIhFjC,KAAKqB,SAAS,CAACM,SAAS3B,KAAKI,MAAMuB,Y,+BAuB5B,IAAD,OAEJ,OACE,yBAAK7B,GAAG,OAAOK,UAAWH,KAAKI,MAAMuB,QAAQ,aAAa,YAAaO,UAAWlC,KAAKwB,QACrF,yBAAK1B,GAAG,UACN,wCAAa,4CACb,kBAAC,EAAD,CAAQI,OAAQF,KAAK4B,WAAYxB,MAAOJ,KAAKI,MAAMuB,WAGnD,yBAAK7B,GAAG,kBACN,8BAAUA,GAAG,SAASqC,MAAOnC,KAAKI,MAAMsB,MAAOU,SAAU,SAAC5B,GAAD,OACvD,EAAKa,SAAS,CAACK,MAAMlB,EAAE6B,OAAOF,WAChC,yBAAKrC,GAAG,gBAAgBwC,YAAatC,KAAKgB,UAE5C,yBAAKlB,GAAG,mBACN,yBAAKA,GAAG,kB,GA1DJO,cCOEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2DCbNuB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkB,eAAe,SD0HpB,kBAAmBgB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9a1fcfe0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Toggle.css';\r\n\r\nclass Toggle extends Component{\r\n  render(){\r\n    return (\r\n      <div id=\"groove\" onClick={this.props.toggle}>\r\n        <div id=\"thumb\" className={this.props.state?'light':''}></div>\r\n      </div>);\r\n  }\r\n}\r\n\r\nexport default Toggle;\r\n","import React, {Component} from 'react';\nimport marked from 'marked';\nimport Toggle from './Toggle';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      input:\"# Hello World\\n\\nI'm a markdown previewer powered by [marked.js](https://marked.js.org/#/README.md#README.md)\\n\\nand built with `react`\\n\\n## Styles I can preview\\n\\n- Code block\\n\\n```\\nImport React from 'react';\\nconst App = () => {\\nreturn();\\n};\\n```\\n\\n- Table\\n\\nHeader 1 | Header 2 | Header 3\\n---- |---- | ----\\nEntry 1 | Entry 1 | Entry 1\\nEntry 2 | Entry 2 | Entry 2\\n\\n- _Text_ | **Text** | ~Text~ decoration\\n\\n- Blockquote\\n> I'm a Quote!\\n\\n- Indented and ordered list\\n\\t- First level\\n\\t\\t- Second level \\n\\t\\t\\t1. Numbered\\n\\t\\t\\t2. Numbered\\n\\n- Image\\n\\n![Twitter icon](https://cdn2.iconfinder.com/data/icons/metro-uinvert-dock/256/Twitter_NEW.png)\",\n      isLight:true,\n      pageWidth:0\n    };\n    this.switchMode = this.switchMode.bind(this);\n  }\n\n  componentDidMount(){\n    document.getElementById('preview').innerHTML = marked(this.state.input, {breaks:true});\n  }\n\n  componentDidUpdate(){\n    document.getElementById('preview').innerHTML = marked(this.state.input, {breaks:true});\n  }\n\n  switchMode(){\n    this.setState({isLight:!this.state.isLight});\n  }\n\n  move = (e) => {\n    // console.log('move triggered', e.clientX);\n    if(e.clientX>20 && e.clientX<this.state.pageWidth-20){\n      let newGrid = e.clientX+'px minmax(0, auto)';\n      document.querySelector('#page').style.gridTemplateColumns = newGrid;\n    }\n  }\n\n  resize = (e) => {\n    let page = document.querySelector('#page');\n    let width = getComputedStyle(page).width.match(/\\d+/);\n    this.setState({pageWidth:Number(width)});\n    page.addEventListener('mousemove', this.move);\n  }\n\n  remove = () => {\n    let page = document.querySelector('#page');\n    page.removeEventListener('mousemove', this.move);\n  }\n\n  render(){\n\n      return (\n        <div id=\"page\" className={this.state.isLight?'light-mode':'dark-mode'} onMouseUp={this.remove}>\n          <div id=\"header\" >\n            <h1>Markdown <span>Previewer</span></h1>\n            <Toggle toggle={this.switchMode} state={this.state.isLight}/>\n            </div>\n\n            <div id=\"editor-wrapper\">\n              <textarea id=\"editor\" value={this.state.input} onChange={(e) =>\n                this.setState({input:e.target.value})}></textarea>\n              <div id=\"resize-handle\" onMouseDown={this.resize} ></div>\n            </div>\n            <div id=\"preview-wrapper\">\n              <div id=\"preview\"></div>\n            </div>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}